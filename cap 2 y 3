# 📘 CAPÍTULO 2 y 3

---

## 📘 CAPÍTULO 2 – Funciones CSS (calc(), clamp(), min(), max())

### 📌 Concepto
Las funciones en CSS forman parte de las herramientas modernas que permiten **definir valores dinámicos sin necesidad de JavaScript**.  
Su propósito es calcular y ajustar automáticamente propiedades de diseño, lo que hace que las páginas sean más **flexibles y responsivas** (MDN Web Docs, s. f.).

Estas funciones se interpretan directamente en el navegador y pueden trabajar con **unidades mixtas** (px, %, vw, rem, etc.), lo que antes requería cálculos manuales o media queries adicionales.  

Entre las más usadas tenemos:

- **`calc()`** → permite realizar operaciones matemáticas (+, −, ×, ÷).  
- **`min()`** → selecciona el valor más pequeño entre dos o más opciones.  
- **`max()`** → selecciona el valor más grande entre dos o más opciones.  
- **`clamp()`** → fija un rango mínimo, preferido y máximo en una sola línea.  

Estas funciones, combinadas con **variables CSS**, dan mayor control y eficiencia en proyectos grandes de diseño web.  

---

### ✅ Ventajas
- **Adaptabilidad:** ajustan medidas de forma automática según el tamaño del dispositivo.  
- **Simplicidad:** reducen la necesidad de usar JavaScript o varias media queries.  
- **Flexibilidad:** permiten mezclar diferentes unidades (ejemplo: px con %).  
- **Mantenimiento fácil:** facilitan cambios en proyectos grandes y responsivos.  

---

### 💻 Ejemplos de código

#### Ejemplo con `calc()`
```css
div {
  width: calc(100% - 50px);
}
### Ejemplo con min()
```css  
div {
  width: min(70%, 400px);
}

➡ El ancho será el menor valor: 70% de la pantalla o 400px.

# 📘 CAPÍTULO 3 – Grid Layout Avanzado (Áreas de grid, `auto-fit`, `auto-fill`)

El **CSS Grid Layout** es un sistema de diseño en dos dimensiones (**filas y columnas**) que facilita la construcción de interfaces web organizadas y responsivas.  

A diferencia de **Flexbox**, que trabaja en una sola dirección (fila o columna), **Grid** permite controlar simultáneamente ambas dimensiones, ofreciendo mayor precisión y flexibilidad (W3C, s. f.).  

Dentro de sus características avanzadas destacan:
- **`grid-template-areas`**: permite asignar nombres a secciones del layout, lo que mejora la legibilidad y semántica del código.  
- **`auto-fit` y `auto-fill`**: permiten crear cuadrículas dinámicas donde los elementos se ajustan automáticamente al espacio disponible, sin necesidad de usar múltiples media queries.  

Estas propiedades hacen de **Grid** una herramienta fundamental en proyectos modernos de diseño web, especialmente en páginas con estructuras complejas como **dashboards, plantillas de noticias, portfolios o aplicaciones web**.  

## 🔹 Ventajas
- **Organización clara**: usar nombres en las áreas facilita la lectura y mantenimiento.  
- **Diseño responsivo**: `auto-fit` y `auto-fill` ajustan automáticamente el número de columnas.  
- **Mayor control**: permite distribuir espacio, alineaciones y relaciones entre elementos de forma precisa.  
- **Escalabilidad**: útil para proyectos grandes donde la estructura puede crecer fácilmente.  

## 🔹 Ejemplos de código

### 1. Uso de `grid-template-areas`
```css
.container {
  display: grid;
  grid-template-areas:
    "header header"
    "sidebar main"
    "footer footer";
  grid-template-columns: 1fr 2fr;
  gap: 10px;
}

.header {
  grid-area: header;
  background: lightblue;
}

.sidebar {
  grid-area: sidebar;
  background: lightgreen;
}

.main {
  grid-area: main;
  background: lightcoral;
}

.footer {
  grid-area: footer;
  background: lightgray;
}
